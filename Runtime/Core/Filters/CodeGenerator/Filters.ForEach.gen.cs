#if ENABLE_IL2CPP
#define INLINE_METHODS
#endif

namespace ME.ECS {

    using Filters;
    using Buffers;
    using ME.ECS.Collections;
    
    using Unity.Burst;
    using Unity.Jobs;
    using Unity.Collections.LowLevel.Unsafe;
    using System.Runtime.InteropServices;

    public interface IFilterBag {
        int Count { get; }
        void BeginForEachIndex(int chunkIndex);
        void EndForEachIndex();
    }

    public unsafe struct Ptr {

        public void* value;

    }

    public struct Op {

        public int entityIndex;
        public int componentId; // -1 = entity
        public byte code; // 1 - change, 2 - remove

    }
    
    public struct Ops {

        public int Length => this.items.Length;
        private Unity.Collections.NativeArray<Op> items;
        private Unity.Collections.NativeArray<bool> exist;
        
        public Ops(int length) {
            
            this.items = new Unity.Collections.NativeArray<Op>(length, Unity.Collections.Allocator.Temp);
            this.exist = new Unity.Collections.NativeArray<bool>(length, Unity.Collections.Allocator.Temp);
            
        }

        public void Write(Op op) {
            
            this.items[op.entityIndex] = op;
            this.exist[op.entityIndex] = true;

        }

        public bool Read(int index, out Op op) {

            if (this.exist[index] == true) {
                op = this.items[index];
                return true;
            }

            op = default;
            return false;

        }

        public void BeginForEachIndex(int index) {
            
        }

        public void EndForEachIndex() {
            
        }

        public void Dispose() {

            this.items.Dispose();
            this.exist.Dispose();

        }

    }
    
    namespace Buffers {

        #if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0> : IFilterBag  where T0:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(1, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(2, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(3, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(4, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(5, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(6, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(7, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(8, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(9, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };
ref var regT8 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
regT8.Merge(ref memAllocator);
this.regs[8] = new Ptr() { value = regT8.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T8>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT8(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;
public void RemoveT8(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T8 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T8 GetT8(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
}
public ref readonly T8 ReadT8(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
public bool HasT8(int index) => UnsafeUtility.ReadArrayElement<Component<T8>>(this.regs[8].value, this.indexes[index]).state > 0;
public long GetVersionT8(int index) => UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(10, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };
ref var regT8 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
regT8.Merge(ref memAllocator);
this.regs[8] = new Ptr() { value = regT8.components.GetUnsafePtr(ref memAllocator) };
ref var regT9 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
regT9.Merge(ref memAllocator);
this.regs[9] = new Ptr() { value = regT9.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T8>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT8(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T9>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT9(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;
public void RemoveT8(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T8 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T8 GetT8(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
}
public ref readonly T8 ReadT8(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
public bool HasT8(int index) => UnsafeUtility.ReadArrayElement<Component<T8>>(this.regs[8].value, this.indexes[index]).state > 0;
public long GetVersionT8(int index) => UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).version;
public void RemoveT9(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T9 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T9 GetT9(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
}
public ref readonly T9 ReadT9(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
public bool HasT9(int index) => UnsafeUtility.ReadArrayElement<Component<T9>>(this.regs[9].value, this.indexes[index]).state > 0;
public long GetVersionT9(int index) => UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(11, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };
ref var regT8 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
regT8.Merge(ref memAllocator);
this.regs[8] = new Ptr() { value = regT8.components.GetUnsafePtr(ref memAllocator) };
ref var regT9 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
regT9.Merge(ref memAllocator);
this.regs[9] = new Ptr() { value = regT9.components.GetUnsafePtr(ref memAllocator) };
ref var regT10 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
regT10.Merge(ref memAllocator);
this.regs[10] = new Ptr() { value = regT10.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T8>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT8(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T9>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT9(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T10>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT10(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;
public void RemoveT8(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T8 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T8 GetT8(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
}
public ref readonly T8 ReadT8(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
public bool HasT8(int index) => UnsafeUtility.ReadArrayElement<Component<T8>>(this.regs[8].value, this.indexes[index]).state > 0;
public long GetVersionT8(int index) => UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).version;
public void RemoveT9(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T9 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T9 GetT9(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
}
public ref readonly T9 ReadT9(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
public bool HasT9(int index) => UnsafeUtility.ReadArrayElement<Component<T9>>(this.regs[9].value, this.indexes[index]).state > 0;
public long GetVersionT9(int index) => UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).version;
public void RemoveT10(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T10 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T10 GetT10(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
}
public ref readonly T10 ReadT10(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
public bool HasT10(int index) => UnsafeUtility.ReadArrayElement<Component<T10>>(this.regs[10].value, this.indexes[index]).state > 0;
public long GetVersionT10(int index) => UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(12, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };
ref var regT8 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
regT8.Merge(ref memAllocator);
this.regs[8] = new Ptr() { value = regT8.components.GetUnsafePtr(ref memAllocator) };
ref var regT9 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
regT9.Merge(ref memAllocator);
this.regs[9] = new Ptr() { value = regT9.components.GetUnsafePtr(ref memAllocator) };
ref var regT10 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
regT10.Merge(ref memAllocator);
this.regs[10] = new Ptr() { value = regT10.components.GetUnsafePtr(ref memAllocator) };
ref var regT11 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
regT11.Merge(ref memAllocator);
this.regs[11] = new Ptr() { value = regT11.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T8>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT8(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T9>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT9(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T10>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT10(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T11>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT11(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;
public void RemoveT8(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T8 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T8 GetT8(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
}
public ref readonly T8 ReadT8(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
public bool HasT8(int index) => UnsafeUtility.ReadArrayElement<Component<T8>>(this.regs[8].value, this.indexes[index]).state > 0;
public long GetVersionT8(int index) => UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).version;
public void RemoveT9(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T9 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T9 GetT9(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
}
public ref readonly T9 ReadT9(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
public bool HasT9(int index) => UnsafeUtility.ReadArrayElement<Component<T9>>(this.regs[9].value, this.indexes[index]).state > 0;
public long GetVersionT9(int index) => UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).version;
public void RemoveT10(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T10 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T10 GetT10(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
}
public ref readonly T10 ReadT10(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
public bool HasT10(int index) => UnsafeUtility.ReadArrayElement<Component<T10>>(this.regs[10].value, this.indexes[index]).state > 0;
public long GetVersionT10(int index) => UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).version;
public void RemoveT11(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T11 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T11 GetT11(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
}
public ref readonly T11 ReadT11(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
public bool HasT11(int index) => UnsafeUtility.ReadArrayElement<Component<T11>>(this.regs[11].value, this.indexes[index]).state > 0;
public long GetVersionT11(int index) => UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(13, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };
ref var regT8 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
regT8.Merge(ref memAllocator);
this.regs[8] = new Ptr() { value = regT8.components.GetUnsafePtr(ref memAllocator) };
ref var regT9 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
regT9.Merge(ref memAllocator);
this.regs[9] = new Ptr() { value = regT9.components.GetUnsafePtr(ref memAllocator) };
ref var regT10 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
regT10.Merge(ref memAllocator);
this.regs[10] = new Ptr() { value = regT10.components.GetUnsafePtr(ref memAllocator) };
ref var regT11 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
regT11.Merge(ref memAllocator);
this.regs[11] = new Ptr() { value = regT11.components.GetUnsafePtr(ref memAllocator) };
ref var regT12 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
regT12.Merge(ref memAllocator);
this.regs[12] = new Ptr() { value = regT12.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T8>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT8(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T9>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT9(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T10>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT10(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T11>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT11(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T12>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT12(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;
public void RemoveT8(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T8 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T8 GetT8(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
}
public ref readonly T8 ReadT8(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
public bool HasT8(int index) => UnsafeUtility.ReadArrayElement<Component<T8>>(this.regs[8].value, this.indexes[index]).state > 0;
public long GetVersionT8(int index) => UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).version;
public void RemoveT9(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T9 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T9 GetT9(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
}
public ref readonly T9 ReadT9(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
public bool HasT9(int index) => UnsafeUtility.ReadArrayElement<Component<T9>>(this.regs[9].value, this.indexes[index]).state > 0;
public long GetVersionT9(int index) => UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).version;
public void RemoveT10(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T10 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T10 GetT10(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
}
public ref readonly T10 ReadT10(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
public bool HasT10(int index) => UnsafeUtility.ReadArrayElement<Component<T10>>(this.regs[10].value, this.indexes[index]).state > 0;
public long GetVersionT10(int index) => UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).version;
public void RemoveT11(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T11 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T11 GetT11(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
}
public ref readonly T11 ReadT11(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
public bool HasT11(int index) => UnsafeUtility.ReadArrayElement<Component<T11>>(this.regs[11].value, this.indexes[index]).state > 0;
public long GetVersionT11(int index) => UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).version;
public void RemoveT12(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T12 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T12 GetT12(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
}
public ref readonly T12 ReadT12(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
public bool HasT12(int index) => UnsafeUtility.ReadArrayElement<Component<T12>>(this.regs[12].value, this.indexes[index]).state > 0;
public long GetVersionT12(int index) => UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(14, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };
ref var regT8 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
regT8.Merge(ref memAllocator);
this.regs[8] = new Ptr() { value = regT8.components.GetUnsafePtr(ref memAllocator) };
ref var regT9 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
regT9.Merge(ref memAllocator);
this.regs[9] = new Ptr() { value = regT9.components.GetUnsafePtr(ref memAllocator) };
ref var regT10 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
regT10.Merge(ref memAllocator);
this.regs[10] = new Ptr() { value = regT10.components.GetUnsafePtr(ref memAllocator) };
ref var regT11 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
regT11.Merge(ref memAllocator);
this.regs[11] = new Ptr() { value = regT11.components.GetUnsafePtr(ref memAllocator) };
ref var regT12 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
regT12.Merge(ref memAllocator);
this.regs[12] = new Ptr() { value = regT12.components.GetUnsafePtr(ref memAllocator) };
ref var regT13 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
regT13.Merge(ref memAllocator);
this.regs[13] = new Ptr() { value = regT13.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T8>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT8(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T9>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT9(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T10>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT10(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T11>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT11(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T12>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT12(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T13>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT13(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;
public void RemoveT8(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T8 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T8 GetT8(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
}
public ref readonly T8 ReadT8(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
public bool HasT8(int index) => UnsafeUtility.ReadArrayElement<Component<T8>>(this.regs[8].value, this.indexes[index]).state > 0;
public long GetVersionT8(int index) => UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).version;
public void RemoveT9(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T9 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T9 GetT9(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
}
public ref readonly T9 ReadT9(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
public bool HasT9(int index) => UnsafeUtility.ReadArrayElement<Component<T9>>(this.regs[9].value, this.indexes[index]).state > 0;
public long GetVersionT9(int index) => UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).version;
public void RemoveT10(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T10 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T10 GetT10(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
}
public ref readonly T10 ReadT10(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
public bool HasT10(int index) => UnsafeUtility.ReadArrayElement<Component<T10>>(this.regs[10].value, this.indexes[index]).state > 0;
public long GetVersionT10(int index) => UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).version;
public void RemoveT11(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T11 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T11 GetT11(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
}
public ref readonly T11 ReadT11(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
public bool HasT11(int index) => UnsafeUtility.ReadArrayElement<Component<T11>>(this.regs[11].value, this.indexes[index]).state > 0;
public long GetVersionT11(int index) => UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).version;
public void RemoveT12(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T12 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T12 GetT12(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
}
public ref readonly T12 ReadT12(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
public bool HasT12(int index) => UnsafeUtility.ReadArrayElement<Component<T12>>(this.regs[12].value, this.indexes[index]).state > 0;
public long GetVersionT12(int index) => UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).version;
public void RemoveT13(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T13 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T13 GetT13(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
}
public ref readonly T13 ReadT13(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
public bool HasT13(int index) => UnsafeUtility.ReadArrayElement<Component<T13>>(this.regs[13].value, this.indexes[index]).state > 0;
public long GetVersionT13(int index) => UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(15, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };
ref var regT8 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
regT8.Merge(ref memAllocator);
this.regs[8] = new Ptr() { value = regT8.components.GetUnsafePtr(ref memAllocator) };
ref var regT9 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
regT9.Merge(ref memAllocator);
this.regs[9] = new Ptr() { value = regT9.components.GetUnsafePtr(ref memAllocator) };
ref var regT10 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
regT10.Merge(ref memAllocator);
this.regs[10] = new Ptr() { value = regT10.components.GetUnsafePtr(ref memAllocator) };
ref var regT11 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
regT11.Merge(ref memAllocator);
this.regs[11] = new Ptr() { value = regT11.components.GetUnsafePtr(ref memAllocator) };
ref var regT12 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
regT12.Merge(ref memAllocator);
this.regs[12] = new Ptr() { value = regT12.components.GetUnsafePtr(ref memAllocator) };
ref var regT13 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
regT13.Merge(ref memAllocator);
this.regs[13] = new Ptr() { value = regT13.components.GetUnsafePtr(ref memAllocator) };
ref var regT14 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
regT14.Merge(ref memAllocator);
this.regs[14] = new Ptr() { value = regT14.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T8>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT8(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T9>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT9(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T10>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT10(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T11>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT11(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T12>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT12(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T13>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT13(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T14>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT14(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;
public void RemoveT8(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T8 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T8 GetT8(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
}
public ref readonly T8 ReadT8(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
public bool HasT8(int index) => UnsafeUtility.ReadArrayElement<Component<T8>>(this.regs[8].value, this.indexes[index]).state > 0;
public long GetVersionT8(int index) => UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).version;
public void RemoveT9(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T9 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T9 GetT9(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
}
public ref readonly T9 ReadT9(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
public bool HasT9(int index) => UnsafeUtility.ReadArrayElement<Component<T9>>(this.regs[9].value, this.indexes[index]).state > 0;
public long GetVersionT9(int index) => UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).version;
public void RemoveT10(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T10 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T10 GetT10(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
}
public ref readonly T10 ReadT10(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
public bool HasT10(int index) => UnsafeUtility.ReadArrayElement<Component<T10>>(this.regs[10].value, this.indexes[index]).state > 0;
public long GetVersionT10(int index) => UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).version;
public void RemoveT11(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T11 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T11 GetT11(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
}
public ref readonly T11 ReadT11(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
public bool HasT11(int index) => UnsafeUtility.ReadArrayElement<Component<T11>>(this.regs[11].value, this.indexes[index]).state > 0;
public long GetVersionT11(int index) => UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).version;
public void RemoveT12(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T12 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T12 GetT12(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
}
public ref readonly T12 ReadT12(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
public bool HasT12(int index) => UnsafeUtility.ReadArrayElement<Component<T12>>(this.regs[12].value, this.indexes[index]).state > 0;
public long GetVersionT12(int index) => UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).version;
public void RemoveT13(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T13 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T13 GetT13(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
}
public ref readonly T13 ReadT13(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
public bool HasT13(int index) => UnsafeUtility.ReadArrayElement<Component<T13>>(this.regs[13].value, this.indexes[index]).state > 0;
public long GetVersionT13(int index) => UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).version;
public void RemoveT14(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T14 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T14 GetT14(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).data;
}
public ref readonly T14 ReadT14(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).data;
public bool HasT14(int index) => UnsafeUtility.ReadArrayElement<Component<T14>>(this.regs[14].value, this.indexes[index]).state > 0;
public long GetVersionT14(int index) => UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(16, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };
ref var regT8 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
regT8.Merge(ref memAllocator);
this.regs[8] = new Ptr() { value = regT8.components.GetUnsafePtr(ref memAllocator) };
ref var regT9 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
regT9.Merge(ref memAllocator);
this.regs[9] = new Ptr() { value = regT9.components.GetUnsafePtr(ref memAllocator) };
ref var regT10 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
regT10.Merge(ref memAllocator);
this.regs[10] = new Ptr() { value = regT10.components.GetUnsafePtr(ref memAllocator) };
ref var regT11 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
regT11.Merge(ref memAllocator);
this.regs[11] = new Ptr() { value = regT11.components.GetUnsafePtr(ref memAllocator) };
ref var regT12 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
regT12.Merge(ref memAllocator);
this.regs[12] = new Ptr() { value = regT12.components.GetUnsafePtr(ref memAllocator) };
ref var regT13 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
regT13.Merge(ref memAllocator);
this.regs[13] = new Ptr() { value = regT13.components.GetUnsafePtr(ref memAllocator) };
ref var regT14 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
regT14.Merge(ref memAllocator);
this.regs[14] = new Ptr() { value = regT14.components.GetUnsafePtr(ref memAllocator) };
ref var regT15 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
regT15.Merge(ref memAllocator);
this.regs[15] = new Ptr() { value = regT15.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T8>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT8(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T9>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT9(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T10>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT10(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T11>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT11(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T12>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT12(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T13>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT13(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T14>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT14(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T15>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT15(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;
public void RemoveT8(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T8 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T8 GetT8(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
}
public ref readonly T8 ReadT8(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
public bool HasT8(int index) => UnsafeUtility.ReadArrayElement<Component<T8>>(this.regs[8].value, this.indexes[index]).state > 0;
public long GetVersionT8(int index) => UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).version;
public void RemoveT9(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T9 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T9 GetT9(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
}
public ref readonly T9 ReadT9(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
public bool HasT9(int index) => UnsafeUtility.ReadArrayElement<Component<T9>>(this.regs[9].value, this.indexes[index]).state > 0;
public long GetVersionT9(int index) => UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).version;
public void RemoveT10(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T10 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T10 GetT10(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
}
public ref readonly T10 ReadT10(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
public bool HasT10(int index) => UnsafeUtility.ReadArrayElement<Component<T10>>(this.regs[10].value, this.indexes[index]).state > 0;
public long GetVersionT10(int index) => UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).version;
public void RemoveT11(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T11 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T11 GetT11(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
}
public ref readonly T11 ReadT11(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
public bool HasT11(int index) => UnsafeUtility.ReadArrayElement<Component<T11>>(this.regs[11].value, this.indexes[index]).state > 0;
public long GetVersionT11(int index) => UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).version;
public void RemoveT12(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T12 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T12 GetT12(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
}
public ref readonly T12 ReadT12(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
public bool HasT12(int index) => UnsafeUtility.ReadArrayElement<Component<T12>>(this.regs[12].value, this.indexes[index]).state > 0;
public long GetVersionT12(int index) => UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).version;
public void RemoveT13(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T13 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T13 GetT13(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
}
public ref readonly T13 ReadT13(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
public bool HasT13(int index) => UnsafeUtility.ReadArrayElement<Component<T13>>(this.regs[13].value, this.indexes[index]).state > 0;
public long GetVersionT13(int index) => UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).version;
public void RemoveT14(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T14 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T14 GetT14(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).data;
}
public ref readonly T14 ReadT14(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).data;
public bool HasT14(int index) => UnsafeUtility.ReadArrayElement<Component<T14>>(this.regs[14].value, this.indexes[index]).state > 0;
public long GetVersionT14(int index) => UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).version;
public void RemoveT15(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T15 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T15 GetT15(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).data;
}
public ref readonly T15 ReadT15(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).data;
public bool HasT15(int index) => UnsafeUtility.ReadArrayElement<Component<T15>>(this.regs[15].value, this.indexes[index]).state > 0;
public long GetVersionT15(int index) => UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(17, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };
ref var regT8 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
regT8.Merge(ref memAllocator);
this.regs[8] = new Ptr() { value = regT8.components.GetUnsafePtr(ref memAllocator) };
ref var regT9 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
regT9.Merge(ref memAllocator);
this.regs[9] = new Ptr() { value = regT9.components.GetUnsafePtr(ref memAllocator) };
ref var regT10 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
regT10.Merge(ref memAllocator);
this.regs[10] = new Ptr() { value = regT10.components.GetUnsafePtr(ref memAllocator) };
ref var regT11 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
regT11.Merge(ref memAllocator);
this.regs[11] = new Ptr() { value = regT11.components.GetUnsafePtr(ref memAllocator) };
ref var regT12 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
regT12.Merge(ref memAllocator);
this.regs[12] = new Ptr() { value = regT12.components.GetUnsafePtr(ref memAllocator) };
ref var regT13 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
regT13.Merge(ref memAllocator);
this.regs[13] = new Ptr() { value = regT13.components.GetUnsafePtr(ref memAllocator) };
ref var regT14 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
regT14.Merge(ref memAllocator);
this.regs[14] = new Ptr() { value = regT14.components.GetUnsafePtr(ref memAllocator) };
ref var regT15 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
regT15.Merge(ref memAllocator);
this.regs[15] = new Ptr() { value = regT15.components.GetUnsafePtr(ref memAllocator) };
ref var regT16 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T16>>(allRegs.items[in memAllocator, AllComponentTypes<T16>.typeId]);
regT16.Merge(ref memAllocator);
this.regs[16] = new Ptr() { value = regT16.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T8>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT8(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T9>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT9(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T10>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT10(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T11>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT11(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T12>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT12(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T13>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT13(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T14>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT14(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T15>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT15(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T16>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T16>>(allRegs.items[in memAllocator, AllComponentTypes<T16>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT16(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T16>>(allRegs.items[in memAllocator, AllComponentTypes<T16>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;
public void RemoveT8(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T8 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T8 GetT8(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
}
public ref readonly T8 ReadT8(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
public bool HasT8(int index) => UnsafeUtility.ReadArrayElement<Component<T8>>(this.regs[8].value, this.indexes[index]).state > 0;
public long GetVersionT8(int index) => UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).version;
public void RemoveT9(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T9 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T9 GetT9(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
}
public ref readonly T9 ReadT9(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
public bool HasT9(int index) => UnsafeUtility.ReadArrayElement<Component<T9>>(this.regs[9].value, this.indexes[index]).state > 0;
public long GetVersionT9(int index) => UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).version;
public void RemoveT10(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T10 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T10 GetT10(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
}
public ref readonly T10 ReadT10(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
public bool HasT10(int index) => UnsafeUtility.ReadArrayElement<Component<T10>>(this.regs[10].value, this.indexes[index]).state > 0;
public long GetVersionT10(int index) => UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).version;
public void RemoveT11(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T11 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T11 GetT11(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
}
public ref readonly T11 ReadT11(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
public bool HasT11(int index) => UnsafeUtility.ReadArrayElement<Component<T11>>(this.regs[11].value, this.indexes[index]).state > 0;
public long GetVersionT11(int index) => UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).version;
public void RemoveT12(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T12 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T12 GetT12(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
}
public ref readonly T12 ReadT12(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
public bool HasT12(int index) => UnsafeUtility.ReadArrayElement<Component<T12>>(this.regs[12].value, this.indexes[index]).state > 0;
public long GetVersionT12(int index) => UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).version;
public void RemoveT13(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T13 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T13 GetT13(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
}
public ref readonly T13 ReadT13(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
public bool HasT13(int index) => UnsafeUtility.ReadArrayElement<Component<T13>>(this.regs[13].value, this.indexes[index]).state > 0;
public long GetVersionT13(int index) => UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).version;
public void RemoveT14(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T14 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T14 GetT14(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).data;
}
public ref readonly T14 ReadT14(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).data;
public bool HasT14(int index) => UnsafeUtility.ReadArrayElement<Component<T14>>(this.regs[14].value, this.indexes[index]).state > 0;
public long GetVersionT14(int index) => UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).version;
public void RemoveT15(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T15 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T15 GetT15(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).data;
}
public ref readonly T15 ReadT15(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).data;
public bool HasT15(int index) => UnsafeUtility.ReadArrayElement<Component<T15>>(this.regs[15].value, this.indexes[index]).state > 0;
public long GetVersionT15(int index) => UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).version;
public void RemoveT16(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T16>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T16 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T16>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T16 GetT16(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T16>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]).data;
}
public ref readonly T16 ReadT16(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]).data;
public bool HasT16(int index) => UnsafeUtility.ReadArrayElement<Component<T16>>(this.regs[16].value, this.indexes[index]).state > 0;
public long GetVersionT16(int index) => UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(18, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };
ref var regT8 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
regT8.Merge(ref memAllocator);
this.regs[8] = new Ptr() { value = regT8.components.GetUnsafePtr(ref memAllocator) };
ref var regT9 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
regT9.Merge(ref memAllocator);
this.regs[9] = new Ptr() { value = regT9.components.GetUnsafePtr(ref memAllocator) };
ref var regT10 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
regT10.Merge(ref memAllocator);
this.regs[10] = new Ptr() { value = regT10.components.GetUnsafePtr(ref memAllocator) };
ref var regT11 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
regT11.Merge(ref memAllocator);
this.regs[11] = new Ptr() { value = regT11.components.GetUnsafePtr(ref memAllocator) };
ref var regT12 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
regT12.Merge(ref memAllocator);
this.regs[12] = new Ptr() { value = regT12.components.GetUnsafePtr(ref memAllocator) };
ref var regT13 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
regT13.Merge(ref memAllocator);
this.regs[13] = new Ptr() { value = regT13.components.GetUnsafePtr(ref memAllocator) };
ref var regT14 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
regT14.Merge(ref memAllocator);
this.regs[14] = new Ptr() { value = regT14.components.GetUnsafePtr(ref memAllocator) };
ref var regT15 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
regT15.Merge(ref memAllocator);
this.regs[15] = new Ptr() { value = regT15.components.GetUnsafePtr(ref memAllocator) };
ref var regT16 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T16>>(allRegs.items[in memAllocator, AllComponentTypes<T16>.typeId]);
regT16.Merge(ref memAllocator);
this.regs[16] = new Ptr() { value = regT16.components.GetUnsafePtr(ref memAllocator) };
ref var regT17 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T17>>(allRegs.items[in memAllocator, AllComponentTypes<T17>.typeId]);
regT17.Merge(ref memAllocator);
this.regs[17] = new Ptr() { value = regT17.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T8>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT8(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T9>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT9(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T10>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT10(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T11>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT11(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T12>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT12(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T13>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT13(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T14>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT14(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T15>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT15(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T16>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T16>>(allRegs.items[in memAllocator, AllComponentTypes<T16>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT16(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T16>>(allRegs.items[in memAllocator, AllComponentTypes<T16>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T17>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T17>>(allRegs.items[in memAllocator, AllComponentTypes<T17>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT17(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T17>>(allRegs.items[in memAllocator, AllComponentTypes<T17>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;
public void RemoveT8(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T8 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T8 GetT8(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
}
public ref readonly T8 ReadT8(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
public bool HasT8(int index) => UnsafeUtility.ReadArrayElement<Component<T8>>(this.regs[8].value, this.indexes[index]).state > 0;
public long GetVersionT8(int index) => UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).version;
public void RemoveT9(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T9 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T9 GetT9(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
}
public ref readonly T9 ReadT9(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
public bool HasT9(int index) => UnsafeUtility.ReadArrayElement<Component<T9>>(this.regs[9].value, this.indexes[index]).state > 0;
public long GetVersionT9(int index) => UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).version;
public void RemoveT10(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T10 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T10 GetT10(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
}
public ref readonly T10 ReadT10(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
public bool HasT10(int index) => UnsafeUtility.ReadArrayElement<Component<T10>>(this.regs[10].value, this.indexes[index]).state > 0;
public long GetVersionT10(int index) => UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).version;
public void RemoveT11(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T11 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T11 GetT11(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
}
public ref readonly T11 ReadT11(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
public bool HasT11(int index) => UnsafeUtility.ReadArrayElement<Component<T11>>(this.regs[11].value, this.indexes[index]).state > 0;
public long GetVersionT11(int index) => UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).version;
public void RemoveT12(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T12 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T12 GetT12(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
}
public ref readonly T12 ReadT12(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
public bool HasT12(int index) => UnsafeUtility.ReadArrayElement<Component<T12>>(this.regs[12].value, this.indexes[index]).state > 0;
public long GetVersionT12(int index) => UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).version;
public void RemoveT13(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T13 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T13 GetT13(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
}
public ref readonly T13 ReadT13(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
public bool HasT13(int index) => UnsafeUtility.ReadArrayElement<Component<T13>>(this.regs[13].value, this.indexes[index]).state > 0;
public long GetVersionT13(int index) => UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).version;
public void RemoveT14(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T14 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T14 GetT14(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).data;
}
public ref readonly T14 ReadT14(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).data;
public bool HasT14(int index) => UnsafeUtility.ReadArrayElement<Component<T14>>(this.regs[14].value, this.indexes[index]).state > 0;
public long GetVersionT14(int index) => UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).version;
public void RemoveT15(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T15 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T15 GetT15(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).data;
}
public ref readonly T15 ReadT15(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).data;
public bool HasT15(int index) => UnsafeUtility.ReadArrayElement<Component<T15>>(this.regs[15].value, this.indexes[index]).state > 0;
public long GetVersionT15(int index) => UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).version;
public void RemoveT16(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T16>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T16 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T16>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T16 GetT16(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T16>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]).data;
}
public ref readonly T16 ReadT16(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]).data;
public bool HasT16(int index) => UnsafeUtility.ReadArrayElement<Component<T16>>(this.regs[16].value, this.indexes[index]).state > 0;
public long GetVersionT16(int index) => UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]).version;
public void RemoveT17(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T17>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T17 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T17>>(this.regs[17].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T17>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T17 GetT17(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T17>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T17>>(this.regs[17].value, this.indexes[index]).data;
}
public ref readonly T17 ReadT17(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T17>>(this.regs[17].value, this.indexes[index]).data;
public bool HasT17(int index) => UnsafeUtility.ReadArrayElement<Component<T17>>(this.regs[17].value, this.indexes[index]).state > 0;
public long GetVersionT17(int index) => UnsafeUtility.ArrayElementAsRef<Component<T17>>(this.regs[17].value, this.indexes[index]).version;

    #endregion
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> : IFilterBag  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(19, allocator);
            this.componentOps = new Ops(this.Length);
            ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
            ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
            ref var regT0 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
regT0.Merge(ref memAllocator);
this.regs[0] = new Ptr() { value = regT0.components.GetUnsafePtr(ref memAllocator) };
ref var regT1 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
regT1.Merge(ref memAllocator);
this.regs[1] = new Ptr() { value = regT1.components.GetUnsafePtr(ref memAllocator) };
ref var regT2 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
regT2.Merge(ref memAllocator);
this.regs[2] = new Ptr() { value = regT2.components.GetUnsafePtr(ref memAllocator) };
ref var regT3 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
regT3.Merge(ref memAllocator);
this.regs[3] = new Ptr() { value = regT3.components.GetUnsafePtr(ref memAllocator) };
ref var regT4 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
regT4.Merge(ref memAllocator);
this.regs[4] = new Ptr() { value = regT4.components.GetUnsafePtr(ref memAllocator) };
ref var regT5 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
regT5.Merge(ref memAllocator);
this.regs[5] = new Ptr() { value = regT5.components.GetUnsafePtr(ref memAllocator) };
ref var regT6 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
regT6.Merge(ref memAllocator);
this.regs[6] = new Ptr() { value = regT6.components.GetUnsafePtr(ref memAllocator) };
ref var regT7 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
regT7.Merge(ref memAllocator);
this.regs[7] = new Ptr() { value = regT7.components.GetUnsafePtr(ref memAllocator) };
ref var regT8 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
regT8.Merge(ref memAllocator);
this.regs[8] = new Ptr() { value = regT8.components.GetUnsafePtr(ref memAllocator) };
ref var regT9 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
regT9.Merge(ref memAllocator);
this.regs[9] = new Ptr() { value = regT9.components.GetUnsafePtr(ref memAllocator) };
ref var regT10 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
regT10.Merge(ref memAllocator);
this.regs[10] = new Ptr() { value = regT10.components.GetUnsafePtr(ref memAllocator) };
ref var regT11 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
regT11.Merge(ref memAllocator);
this.regs[11] = new Ptr() { value = regT11.components.GetUnsafePtr(ref memAllocator) };
ref var regT12 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
regT12.Merge(ref memAllocator);
this.regs[12] = new Ptr() { value = regT12.components.GetUnsafePtr(ref memAllocator) };
ref var regT13 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
regT13.Merge(ref memAllocator);
this.regs[13] = new Ptr() { value = regT13.components.GetUnsafePtr(ref memAllocator) };
ref var regT14 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
regT14.Merge(ref memAllocator);
this.regs[14] = new Ptr() { value = regT14.components.GetUnsafePtr(ref memAllocator) };
ref var regT15 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
regT15.Merge(ref memAllocator);
this.regs[15] = new Ptr() { value = regT15.components.GetUnsafePtr(ref memAllocator) };
ref var regT16 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T16>>(allRegs.items[in memAllocator, AllComponentTypes<T16>.typeId]);
regT16.Merge(ref memAllocator);
this.regs[16] = new Ptr() { value = regT16.components.GetUnsafePtr(ref memAllocator) };
ref var regT17 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T17>>(allRegs.items[in memAllocator, AllComponentTypes<T17>.typeId]);
regT17.Merge(ref memAllocator);
this.regs[17] = new Ptr() { value = regT17.components.GetUnsafePtr(ref memAllocator) };
ref var regT18 = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T18>>(allRegs.items[in memAllocator, AllComponentTypes<T18>.typeId]);
regT18.Merge(ref memAllocator);
this.regs[18] = new Ptr() { value = regT18.components.GetUnsafePtr(ref memAllocator) };

        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        ref var allRegs = ref world.currentState.structComponents.unmanagedComponentsStorage;
        ref var memAllocator = ref world.currentState.structComponents.unmanagedComponentsStorage.allocator;
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    if (op.componentId == AllComponentTypes<T0>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT0(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T0>>(allRegs.items[in memAllocator, AllComponentTypes<T0>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T1>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT1(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T1>>(allRegs.items[in memAllocator, AllComponentTypes<T1>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T2>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT2(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T2>>(allRegs.items[in memAllocator, AllComponentTypes<T2>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T3>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT3(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T3>>(allRegs.items[in memAllocator, AllComponentTypes<T3>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T4>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT4(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T4>>(allRegs.items[in memAllocator, AllComponentTypes<T4>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T5>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT5(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T5>>(allRegs.items[in memAllocator, AllComponentTypes<T5>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T6>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT6(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T6>>(allRegs.items[in memAllocator, AllComponentTypes<T6>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T7>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT7(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T7>>(allRegs.items[in memAllocator, AllComponentTypes<T7>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T8>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT8(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T8>>(allRegs.items[in memAllocator, AllComponentTypes<T8>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T9>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT9(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T9>>(allRegs.items[in memAllocator, AllComponentTypes<T9>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T10>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT10(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T10>>(allRegs.items[in memAllocator, AllComponentTypes<T10>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T11>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT11(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T11>>(allRegs.items[in memAllocator, AllComponentTypes<T11>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T12>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT12(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T12>>(allRegs.items[in memAllocator, AllComponentTypes<T12>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T13>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT13(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T13>>(allRegs.items[in memAllocator, AllComponentTypes<T13>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T14>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT14(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T14>>(allRegs.items[in memAllocator, AllComponentTypes<T14>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T15>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT15(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T15>>(allRegs.items[in memAllocator, AllComponentTypes<T15>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T16>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T16>>(allRegs.items[in memAllocator, AllComponentTypes<T16>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT16(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T16>>(allRegs.items[in memAllocator, AllComponentTypes<T16>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T17>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T17>>(allRegs.items[in memAllocator, AllComponentTypes<T17>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT17(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T17>>(allRegs.items[in memAllocator, AllComponentTypes<T17>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}if (op.componentId == AllComponentTypes<T18>.typeId) {
    if (op.code == 1) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T18>>(allRegs.items[in memAllocator, AllComponentTypes<T18>.typeId]);
        DataBlittableBufferAllocatorUtils.PushSet_INTERNAL(world, in entity, ref allRegs, ref reg, this.ReadT18(op.entityIndex));
    } else if (op.code == 2) {
        ref var reg = ref memAllocator.Ref<UnmanagedComponentsStorage.Item<T18>>(allRegs.items[in memAllocator, AllComponentTypes<T18>.typeId]);
        DataBlittableBufferAllocatorUtils.PushRemove_INTERNAL(world, in entity, ref allRegs, ref reg);
    }
}
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    public void RemoveT0(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T0 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T0 GetT0(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T0>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
}
public ref readonly T0 ReadT0(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).data;
public bool HasT0(int index) => UnsafeUtility.ReadArrayElement<Component<T0>>(this.regs[0].value, this.indexes[index]).state > 0;
public long GetVersionT0(int index) => UnsafeUtility.ArrayElementAsRef<Component<T0>>(this.regs[0].value, this.indexes[index]).version;
public void RemoveT1(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T1 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T1 GetT1(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T1>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
}
public ref readonly T1 ReadT1(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).data;
public bool HasT1(int index) => UnsafeUtility.ReadArrayElement<Component<T1>>(this.regs[1].value, this.indexes[index]).state > 0;
public long GetVersionT1(int index) => UnsafeUtility.ArrayElementAsRef<Component<T1>>(this.regs[1].value, this.indexes[index]).version;
public void RemoveT2(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T2 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T2 GetT2(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T2>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
}
public ref readonly T2 ReadT2(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).data;
public bool HasT2(int index) => UnsafeUtility.ReadArrayElement<Component<T2>>(this.regs[2].value, this.indexes[index]).state > 0;
public long GetVersionT2(int index) => UnsafeUtility.ArrayElementAsRef<Component<T2>>(this.regs[2].value, this.indexes[index]).version;
public void RemoveT3(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T3 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T3 GetT3(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T3>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
}
public ref readonly T3 ReadT3(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).data;
public bool HasT3(int index) => UnsafeUtility.ReadArrayElement<Component<T3>>(this.regs[3].value, this.indexes[index]).state > 0;
public long GetVersionT3(int index) => UnsafeUtility.ArrayElementAsRef<Component<T3>>(this.regs[3].value, this.indexes[index]).version;
public void RemoveT4(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T4 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T4 GetT4(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T4>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
}
public ref readonly T4 ReadT4(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).data;
public bool HasT4(int index) => UnsafeUtility.ReadArrayElement<Component<T4>>(this.regs[4].value, this.indexes[index]).state > 0;
public long GetVersionT4(int index) => UnsafeUtility.ArrayElementAsRef<Component<T4>>(this.regs[4].value, this.indexes[index]).version;
public void RemoveT5(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T5 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T5 GetT5(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T5>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
}
public ref readonly T5 ReadT5(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).data;
public bool HasT5(int index) => UnsafeUtility.ReadArrayElement<Component<T5>>(this.regs[5].value, this.indexes[index]).state > 0;
public long GetVersionT5(int index) => UnsafeUtility.ArrayElementAsRef<Component<T5>>(this.regs[5].value, this.indexes[index]).version;
public void RemoveT6(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T6 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T6 GetT6(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T6>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
}
public ref readonly T6 ReadT6(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).data;
public bool HasT6(int index) => UnsafeUtility.ReadArrayElement<Component<T6>>(this.regs[6].value, this.indexes[index]).state > 0;
public long GetVersionT6(int index) => UnsafeUtility.ArrayElementAsRef<Component<T6>>(this.regs[6].value, this.indexes[index]).version;
public void RemoveT7(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T7 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T7 GetT7(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T7>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
}
public ref readonly T7 ReadT7(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).data;
public bool HasT7(int index) => UnsafeUtility.ReadArrayElement<Component<T7>>(this.regs[7].value, this.indexes[index]).state > 0;
public long GetVersionT7(int index) => UnsafeUtility.ArrayElementAsRef<Component<T7>>(this.regs[7].value, this.indexes[index]).version;
public void RemoveT8(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T8 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T8 GetT8(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T8>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
}
public ref readonly T8 ReadT8(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).data;
public bool HasT8(int index) => UnsafeUtility.ReadArrayElement<Component<T8>>(this.regs[8].value, this.indexes[index]).state > 0;
public long GetVersionT8(int index) => UnsafeUtility.ArrayElementAsRef<Component<T8>>(this.regs[8].value, this.indexes[index]).version;
public void RemoveT9(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T9 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T9 GetT9(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T9>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
}
public ref readonly T9 ReadT9(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).data;
public bool HasT9(int index) => UnsafeUtility.ReadArrayElement<Component<T9>>(this.regs[9].value, this.indexes[index]).state > 0;
public long GetVersionT9(int index) => UnsafeUtility.ArrayElementAsRef<Component<T9>>(this.regs[9].value, this.indexes[index]).version;
public void RemoveT10(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T10 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T10 GetT10(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T10>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
}
public ref readonly T10 ReadT10(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).data;
public bool HasT10(int index) => UnsafeUtility.ReadArrayElement<Component<T10>>(this.regs[10].value, this.indexes[index]).state > 0;
public long GetVersionT10(int index) => UnsafeUtility.ArrayElementAsRef<Component<T10>>(this.regs[10].value, this.indexes[index]).version;
public void RemoveT11(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T11 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T11 GetT11(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T11>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
}
public ref readonly T11 ReadT11(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).data;
public bool HasT11(int index) => UnsafeUtility.ReadArrayElement<Component<T11>>(this.regs[11].value, this.indexes[index]).state > 0;
public long GetVersionT11(int index) => UnsafeUtility.ArrayElementAsRef<Component<T11>>(this.regs[11].value, this.indexes[index]).version;
public void RemoveT12(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T12 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T12 GetT12(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T12>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
}
public ref readonly T12 ReadT12(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).data;
public bool HasT12(int index) => UnsafeUtility.ReadArrayElement<Component<T12>>(this.regs[12].value, this.indexes[index]).state > 0;
public long GetVersionT12(int index) => UnsafeUtility.ArrayElementAsRef<Component<T12>>(this.regs[12].value, this.indexes[index]).version;
public void RemoveT13(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T13 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T13 GetT13(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T13>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
}
public ref readonly T13 ReadT13(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).data;
public bool HasT13(int index) => UnsafeUtility.ReadArrayElement<Component<T13>>(this.regs[13].value, this.indexes[index]).state > 0;
public long GetVersionT13(int index) => UnsafeUtility.ArrayElementAsRef<Component<T13>>(this.regs[13].value, this.indexes[index]).version;
public void RemoveT14(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T14 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T14 GetT14(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T14>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).data;
}
public ref readonly T14 ReadT14(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).data;
public bool HasT14(int index) => UnsafeUtility.ReadArrayElement<Component<T14>>(this.regs[14].value, this.indexes[index]).state > 0;
public long GetVersionT14(int index) => UnsafeUtility.ArrayElementAsRef<Component<T14>>(this.regs[14].value, this.indexes[index]).version;
public void RemoveT15(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T15 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T15 GetT15(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T15>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).data;
}
public ref readonly T15 ReadT15(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).data;
public bool HasT15(int index) => UnsafeUtility.ReadArrayElement<Component<T15>>(this.regs[15].value, this.indexes[index]).state > 0;
public long GetVersionT15(int index) => UnsafeUtility.ArrayElementAsRef<Component<T15>>(this.regs[15].value, this.indexes[index]).version;
public void RemoveT16(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T16>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T16 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T16>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T16 GetT16(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T16>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]).data;
}
public ref readonly T16 ReadT16(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]).data;
public bool HasT16(int index) => UnsafeUtility.ReadArrayElement<Component<T16>>(this.regs[16].value, this.indexes[index]).state > 0;
public long GetVersionT16(int index) => UnsafeUtility.ArrayElementAsRef<Component<T16>>(this.regs[16].value, this.indexes[index]).version;
public void RemoveT17(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T17>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T17 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T17>>(this.regs[17].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T17>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T17 GetT17(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T17>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T17>>(this.regs[17].value, this.indexes[index]).data;
}
public ref readonly T17 ReadT17(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T17>>(this.regs[17].value, this.indexes[index]).data;
public bool HasT17(int index) => UnsafeUtility.ReadArrayElement<Component<T17>>(this.regs[17].value, this.indexes[index]).state > 0;
public long GetVersionT17(int index) => UnsafeUtility.ArrayElementAsRef<Component<T17>>(this.regs[17].value, this.indexes[index]).version;
public void RemoveT18(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T18>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T18 component) {
    var entityId = this.indexes[index];
    ref var componentData = ref UnsafeUtility.ArrayElementAsRef<Component<T18>>(this.regs[18].value, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T18>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T18 GetT18(int index) {
    this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T18>.burstTypeId.Data, code = 1, });
    return ref UnsafeUtility.ArrayElementAsRef<Component<T18>>(this.regs[18].value, this.indexes[index]).data;
}
public ref readonly T18 ReadT18(int index) => ref UnsafeUtility.ArrayElementAsRef<Component<T18>>(this.regs[18].value, this.indexes[index]).data;
public bool HasT18(int index) => UnsafeUtility.ReadArrayElement<Component<T18>>(this.regs[18].value, this.indexes[index]).state > 0;
public long GetVersionT18(int index) => UnsafeUtility.ArrayElementAsRef<Component<T18>>(this.regs[18].value, this.indexes[index]).version;

    #endregion
}



    }
    
    public static class FiltersForEachExtensions {

        internal static class JobsW<T0>  where T0:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDW<T0>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDW<T0>> ForEach<T0>(this in Filter filter, ME.ECS.Filters.FDW<T0> onEach)  where T0:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDW<T0>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDW<T0>> task, in Filter filterInternal, ME.ECS.Filters.FDW<T0> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsW<T0>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsW<T0>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i));
            bag.Push();

        }

    });
    
}

internal static class JobsR<T0>  where T0:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDR<T0>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDR<T0>> ForEach<T0>(this in Filter filter, ME.ECS.Filters.FDR<T0> onEach)  where T0:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDR<T0>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDR<T0>> task, in Filter filterInternal, ME.ECS.Filters.FDR<T0> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsR<T0>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsR<T0>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWW<T0,T1>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWW<T0,T1>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWW<T0,T1>> ForEach<T0,T1>(this in Filter filter, ME.ECS.Filters.FDWW<T0,T1> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWW<T0,T1>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWW<T0,T1>> task, in Filter filterInternal, ME.ECS.Filters.FDWW<T0,T1> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWW<T0,T1>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWW<T0,T1>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRW<T0,T1>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRW<T0,T1>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRW<T0,T1>> ForEach<T0,T1>(this in Filter filter, ME.ECS.Filters.FDRW<T0,T1> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRW<T0,T1>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRW<T0,T1>> task, in Filter filterInternal, ME.ECS.Filters.FDRW<T0,T1> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRW<T0,T1>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRW<T0,T1>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRR<T0,T1>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRR<T0,T1>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRR<T0,T1>> ForEach<T0,T1>(this in Filter filter, ME.ECS.Filters.FDRR<T0,T1> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRR<T0,T1>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRR<T0,T1>> task, in Filter filterInternal, ME.ECS.Filters.FDRR<T0,T1> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRR<T0,T1>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRR<T0,T1>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWW<T0,T1,T2>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWW<T0,T1,T2>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWW<T0,T1,T2>> ForEach<T0,T1,T2>(this in Filter filter, ME.ECS.Filters.FDWWW<T0,T1,T2> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWW<T0,T1,T2>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWW<T0,T1,T2>> task, in Filter filterInternal, ME.ECS.Filters.FDWWW<T0,T1,T2> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWW<T0,T1,T2>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWW<T0,T1,T2>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWW<T0,T1,T2>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWW<T0,T1,T2>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWW<T0,T1,T2>> ForEach<T0,T1,T2>(this in Filter filter, ME.ECS.Filters.FDRWW<T0,T1,T2> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWW<T0,T1,T2>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWW<T0,T1,T2>> task, in Filter filterInternal, ME.ECS.Filters.FDRWW<T0,T1,T2> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWW<T0,T1,T2>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWW<T0,T1,T2>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRW<T0,T1,T2>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRW<T0,T1,T2>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRW<T0,T1,T2>> ForEach<T0,T1,T2>(this in Filter filter, ME.ECS.Filters.FDRRW<T0,T1,T2> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRW<T0,T1,T2>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRW<T0,T1,T2>> task, in Filter filterInternal, ME.ECS.Filters.FDRRW<T0,T1,T2> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRW<T0,T1,T2>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRW<T0,T1,T2>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRR<T0,T1,T2>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRR<T0,T1,T2>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRR<T0,T1,T2>> ForEach<T0,T1,T2>(this in Filter filter, ME.ECS.Filters.FDRRR<T0,T1,T2> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRR<T0,T1,T2>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRR<T0,T1,T2>> task, in Filter filterInternal, ME.ECS.Filters.FDRRR<T0,T1,T2> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRR<T0,T1,T2>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRR<T0,T1,T2>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWW<T0,T1,T2,T3>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWW<T0,T1,T2,T3>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWW<T0,T1,T2,T3>> ForEach<T0,T1,T2,T3>(this in Filter filter, ME.ECS.Filters.FDWWWW<T0,T1,T2,T3> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWW<T0,T1,T2,T3>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWW<T0,T1,T2,T3>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWW<T0,T1,T2,T3> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWW<T0,T1,T2,T3>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWW<T0,T1,T2,T3>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWW<T0,T1,T2,T3>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWW<T0,T1,T2,T3>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWW<T0,T1,T2,T3>> ForEach<T0,T1,T2,T3>(this in Filter filter, ME.ECS.Filters.FDRWWW<T0,T1,T2,T3> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWW<T0,T1,T2,T3>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWW<T0,T1,T2,T3>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWW<T0,T1,T2,T3> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWW<T0,T1,T2,T3>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWW<T0,T1,T2,T3>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWW<T0,T1,T2,T3>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWW<T0,T1,T2,T3>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWW<T0,T1,T2,T3>> ForEach<T0,T1,T2,T3>(this in Filter filter, ME.ECS.Filters.FDRRWW<T0,T1,T2,T3> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWW<T0,T1,T2,T3>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWW<T0,T1,T2,T3>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWW<T0,T1,T2,T3> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWW<T0,T1,T2,T3>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWW<T0,T1,T2,T3>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRW<T0,T1,T2,T3>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRW<T0,T1,T2,T3>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRW<T0,T1,T2,T3>> ForEach<T0,T1,T2,T3>(this in Filter filter, ME.ECS.Filters.FDRRRW<T0,T1,T2,T3> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRW<T0,T1,T2,T3>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRW<T0,T1,T2,T3>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRW<T0,T1,T2,T3> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRW<T0,T1,T2,T3>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRW<T0,T1,T2,T3>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRR<T0,T1,T2,T3>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRR<T0,T1,T2,T3>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRR<T0,T1,T2,T3>> ForEach<T0,T1,T2,T3>(this in Filter filter, ME.ECS.Filters.FDRRRR<T0,T1,T2,T3> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRR<T0,T1,T2,T3>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRR<T0,T1,T2,T3>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRR<T0,T1,T2,T3> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRR<T0,T1,T2,T3>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRR<T0,T1,T2,T3>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWW<T0,T1,T2,T3,T4>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWW<T0,T1,T2,T3,T4>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWW<T0,T1,T2,T3,T4>> ForEach<T0,T1,T2,T3,T4>(this in Filter filter, ME.ECS.Filters.FDWWWWW<T0,T1,T2,T3,T4> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWW<T0,T1,T2,T3,T4>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWW<T0,T1,T2,T3,T4>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWW<T0,T1,T2,T3,T4> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWW<T0,T1,T2,T3,T4>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWW<T0,T1,T2,T3,T4>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWW<T0,T1,T2,T3,T4>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWW<T0,T1,T2,T3,T4>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWW<T0,T1,T2,T3,T4>> ForEach<T0,T1,T2,T3,T4>(this in Filter filter, ME.ECS.Filters.FDRWWWW<T0,T1,T2,T3,T4> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWW<T0,T1,T2,T3,T4>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWW<T0,T1,T2,T3,T4>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWW<T0,T1,T2,T3,T4> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWW<T0,T1,T2,T3,T4>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWW<T0,T1,T2,T3,T4>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWW<T0,T1,T2,T3,T4>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWW<T0,T1,T2,T3,T4>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWW<T0,T1,T2,T3,T4>> ForEach<T0,T1,T2,T3,T4>(this in Filter filter, ME.ECS.Filters.FDRRWWW<T0,T1,T2,T3,T4> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWW<T0,T1,T2,T3,T4>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWW<T0,T1,T2,T3,T4>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWW<T0,T1,T2,T3,T4> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWW<T0,T1,T2,T3,T4>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWW<T0,T1,T2,T3,T4>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWW<T0,T1,T2,T3,T4>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWW<T0,T1,T2,T3,T4>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWW<T0,T1,T2,T3,T4>> ForEach<T0,T1,T2,T3,T4>(this in Filter filter, ME.ECS.Filters.FDRRRWW<T0,T1,T2,T3,T4> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWW<T0,T1,T2,T3,T4>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWW<T0,T1,T2,T3,T4>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWW<T0,T1,T2,T3,T4> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWW<T0,T1,T2,T3,T4>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWW<T0,T1,T2,T3,T4>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRW<T0,T1,T2,T3,T4>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRW<T0,T1,T2,T3,T4>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRW<T0,T1,T2,T3,T4>> ForEach<T0,T1,T2,T3,T4>(this in Filter filter, ME.ECS.Filters.FDRRRRW<T0,T1,T2,T3,T4> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRW<T0,T1,T2,T3,T4>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRW<T0,T1,T2,T3,T4>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRW<T0,T1,T2,T3,T4> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRW<T0,T1,T2,T3,T4>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRW<T0,T1,T2,T3,T4>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRR<T0,T1,T2,T3,T4>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRR<T0,T1,T2,T3,T4>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRR<T0,T1,T2,T3,T4>> ForEach<T0,T1,T2,T3,T4>(this in Filter filter, ME.ECS.Filters.FDRRRRR<T0,T1,T2,T3,T4> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRR<T0,T1,T2,T3,T4>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRR<T0,T1,T2,T3,T4>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRR<T0,T1,T2,T3,T4> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRR<T0,T1,T2,T3,T4>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRR<T0,T1,T2,T3,T4>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWW<T0,T1,T2,T3,T4,T5>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWW<T0,T1,T2,T3,T4,T5>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWW<T0,T1,T2,T3,T4,T5>> ForEach<T0,T1,T2,T3,T4,T5>(this in Filter filter, ME.ECS.Filters.FDWWWWWW<T0,T1,T2,T3,T4,T5> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWW<T0,T1,T2,T3,T4,T5>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWW<T0,T1,T2,T3,T4,T5>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWW<T0,T1,T2,T3,T4,T5> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWW<T0,T1,T2,T3,T4,T5>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWW<T0,T1,T2,T3,T4,T5>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWW<T0,T1,T2,T3,T4,T5>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWW<T0,T1,T2,T3,T4,T5>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWW<T0,T1,T2,T3,T4,T5>> ForEach<T0,T1,T2,T3,T4,T5>(this in Filter filter, ME.ECS.Filters.FDRWWWWW<T0,T1,T2,T3,T4,T5> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWW<T0,T1,T2,T3,T4,T5>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWW<T0,T1,T2,T3,T4,T5>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWW<T0,T1,T2,T3,T4,T5> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWW<T0,T1,T2,T3,T4,T5>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWW<T0,T1,T2,T3,T4,T5>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWW<T0,T1,T2,T3,T4,T5>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWW<T0,T1,T2,T3,T4,T5>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWW<T0,T1,T2,T3,T4,T5>> ForEach<T0,T1,T2,T3,T4,T5>(this in Filter filter, ME.ECS.Filters.FDRRWWWW<T0,T1,T2,T3,T4,T5> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWW<T0,T1,T2,T3,T4,T5>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWW<T0,T1,T2,T3,T4,T5>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWW<T0,T1,T2,T3,T4,T5> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWW<T0,T1,T2,T3,T4,T5>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWW<T0,T1,T2,T3,T4,T5>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWW<T0,T1,T2,T3,T4,T5>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWW<T0,T1,T2,T3,T4,T5>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWW<T0,T1,T2,T3,T4,T5>> ForEach<T0,T1,T2,T3,T4,T5>(this in Filter filter, ME.ECS.Filters.FDRRRWWW<T0,T1,T2,T3,T4,T5> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWW<T0,T1,T2,T3,T4,T5>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWW<T0,T1,T2,T3,T4,T5>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWW<T0,T1,T2,T3,T4,T5> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWW<T0,T1,T2,T3,T4,T5>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWW<T0,T1,T2,T3,T4,T5>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWW<T0,T1,T2,T3,T4,T5>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWW<T0,T1,T2,T3,T4,T5>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWW<T0,T1,T2,T3,T4,T5>> ForEach<T0,T1,T2,T3,T4,T5>(this in Filter filter, ME.ECS.Filters.FDRRRRWW<T0,T1,T2,T3,T4,T5> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWW<T0,T1,T2,T3,T4,T5>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWW<T0,T1,T2,T3,T4,T5>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWW<T0,T1,T2,T3,T4,T5> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWW<T0,T1,T2,T3,T4,T5>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWW<T0,T1,T2,T3,T4,T5>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRW<T0,T1,T2,T3,T4,T5>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRW<T0,T1,T2,T3,T4,T5>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRW<T0,T1,T2,T3,T4,T5>> ForEach<T0,T1,T2,T3,T4,T5>(this in Filter filter, ME.ECS.Filters.FDRRRRRW<T0,T1,T2,T3,T4,T5> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRW<T0,T1,T2,T3,T4,T5>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRW<T0,T1,T2,T3,T4,T5>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRW<T0,T1,T2,T3,T4,T5> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRW<T0,T1,T2,T3,T4,T5>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRW<T0,T1,T2,T3,T4,T5>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRR<T0,T1,T2,T3,T4,T5>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRR<T0,T1,T2,T3,T4,T5>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRR<T0,T1,T2,T3,T4,T5>> ForEach<T0,T1,T2,T3,T4,T5>(this in Filter filter, ME.ECS.Filters.FDRRRRRR<T0,T1,T2,T3,T4,T5> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRR<T0,T1,T2,T3,T4,T5>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRR<T0,T1,T2,T3,T4,T5>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRR<T0,T1,T2,T3,T4,T5> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRR<T0,T1,T2,T3,T4,T5>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRR<T0,T1,T2,T3,T4,T5>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWW<T0,T1,T2,T3,T4,T5,T6>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWW<T0,T1,T2,T3,T4,T5,T6>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWW<T0,T1,T2,T3,T4,T5,T6>> ForEach<T0,T1,T2,T3,T4,T5,T6>(this in Filter filter, ME.ECS.Filters.FDWWWWWWW<T0,T1,T2,T3,T4,T5,T6> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWW<T0,T1,T2,T3,T4,T5,T6>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWW<T0,T1,T2,T3,T4,T5,T6>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWW<T0,T1,T2,T3,T4,T5,T6> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWW<T0,T1,T2,T3,T4,T5,T6>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWW<T0,T1,T2,T3,T4,T5,T6>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWW<T0,T1,T2,T3,T4,T5,T6>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWW<T0,T1,T2,T3,T4,T5,T6>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWW<T0,T1,T2,T3,T4,T5,T6>> ForEach<T0,T1,T2,T3,T4,T5,T6>(this in Filter filter, ME.ECS.Filters.FDRWWWWWW<T0,T1,T2,T3,T4,T5,T6> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWW<T0,T1,T2,T3,T4,T5,T6>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWW<T0,T1,T2,T3,T4,T5,T6>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWW<T0,T1,T2,T3,T4,T5,T6> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWW<T0,T1,T2,T3,T4,T5,T6>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWW<T0,T1,T2,T3,T4,T5,T6>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWW<T0,T1,T2,T3,T4,T5,T6>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWW<T0,T1,T2,T3,T4,T5,T6>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWW<T0,T1,T2,T3,T4,T5,T6>> ForEach<T0,T1,T2,T3,T4,T5,T6>(this in Filter filter, ME.ECS.Filters.FDRRWWWWW<T0,T1,T2,T3,T4,T5,T6> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWW<T0,T1,T2,T3,T4,T5,T6>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWW<T0,T1,T2,T3,T4,T5,T6>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWW<T0,T1,T2,T3,T4,T5,T6> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWW<T0,T1,T2,T3,T4,T5,T6>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWW<T0,T1,T2,T3,T4,T5,T6>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWW<T0,T1,T2,T3,T4,T5,T6>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWW<T0,T1,T2,T3,T4,T5,T6>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWW<T0,T1,T2,T3,T4,T5,T6>> ForEach<T0,T1,T2,T3,T4,T5,T6>(this in Filter filter, ME.ECS.Filters.FDRRRWWWW<T0,T1,T2,T3,T4,T5,T6> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWW<T0,T1,T2,T3,T4,T5,T6>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWW<T0,T1,T2,T3,T4,T5,T6>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWW<T0,T1,T2,T3,T4,T5,T6> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWW<T0,T1,T2,T3,T4,T5,T6>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWW<T0,T1,T2,T3,T4,T5,T6>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWW<T0,T1,T2,T3,T4,T5,T6>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWW<T0,T1,T2,T3,T4,T5,T6>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWW<T0,T1,T2,T3,T4,T5,T6>> ForEach<T0,T1,T2,T3,T4,T5,T6>(this in Filter filter, ME.ECS.Filters.FDRRRRWWW<T0,T1,T2,T3,T4,T5,T6> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWW<T0,T1,T2,T3,T4,T5,T6>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWW<T0,T1,T2,T3,T4,T5,T6>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWW<T0,T1,T2,T3,T4,T5,T6> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWW<T0,T1,T2,T3,T4,T5,T6>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWW<T0,T1,T2,T3,T4,T5,T6>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWW<T0,T1,T2,T3,T4,T5,T6>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWW<T0,T1,T2,T3,T4,T5,T6>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWW<T0,T1,T2,T3,T4,T5,T6>> ForEach<T0,T1,T2,T3,T4,T5,T6>(this in Filter filter, ME.ECS.Filters.FDRRRRRWW<T0,T1,T2,T3,T4,T5,T6> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWW<T0,T1,T2,T3,T4,T5,T6>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWW<T0,T1,T2,T3,T4,T5,T6>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWW<T0,T1,T2,T3,T4,T5,T6> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWW<T0,T1,T2,T3,T4,T5,T6>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWW<T0,T1,T2,T3,T4,T5,T6>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRW<T0,T1,T2,T3,T4,T5,T6>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRW<T0,T1,T2,T3,T4,T5,T6>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRW<T0,T1,T2,T3,T4,T5,T6>> ForEach<T0,T1,T2,T3,T4,T5,T6>(this in Filter filter, ME.ECS.Filters.FDRRRRRRW<T0,T1,T2,T3,T4,T5,T6> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRW<T0,T1,T2,T3,T4,T5,T6>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRW<T0,T1,T2,T3,T4,T5,T6>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRW<T0,T1,T2,T3,T4,T5,T6> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRW<T0,T1,T2,T3,T4,T5,T6>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRW<T0,T1,T2,T3,T4,T5,T6>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRR<T0,T1,T2,T3,T4,T5,T6>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRR<T0,T1,T2,T3,T4,T5,T6>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRR<T0,T1,T2,T3,T4,T5,T6>> ForEach<T0,T1,T2,T3,T4,T5,T6>(this in Filter filter, ME.ECS.Filters.FDRRRRRRR<T0,T1,T2,T3,T4,T5,T6> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRR<T0,T1,T2,T3,T4,T5,T6>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRR<T0,T1,T2,T3,T4,T5,T6>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRR<T0,T1,T2,T3,T4,T5,T6> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRR<T0,T1,T2,T3,T4,T5,T6>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRR<T0,T1,T2,T3,T4,T5,T6>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),ref bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),ref bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),ref bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),ref bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),ref bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),ref bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i),ref bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i),ref bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i),in bag.GetT17(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i),in bag.GetT17(i));
            bag.Push();

        }

    });
    
}

internal static class JobsWWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDWWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsWWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsWWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), ref bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRWWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),ref bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRWWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),ref bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRWWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),ref bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRWWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),ref bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRWWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),ref bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRWWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),ref bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRWWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),ref bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRWWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),ref bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRWWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),ref bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRWWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),ref bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRWWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),ref bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRWWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),ref bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRWWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),ref bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRWWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),ref bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRWWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),ref bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRRWWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),ref bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRRRWW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i),ref bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i),in bag.GetT17(i),ref bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRRRRW<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i),in bag.GetT17(i),ref bag.GetT18(i));
            bag.Push();

        }

    });
    
}

internal static class JobsRRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i),in bag.GetT17(i),in bag.GetT18(i));
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> ForEach<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this in Filter filter, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEach)  where T0:unmanaged,IComponentBase where T1:unmanaged,IComponentBase where T2:unmanaged,IComponentBase where T3:unmanaged,IComponentBase where T4:unmanaged,IComponentBase where T5:unmanaged,IComponentBase where T6:unmanaged,IComponentBase where T7:unmanaged,IComponentBase where T8:unmanaged,IComponentBase where T9:unmanaged,IComponentBase where T10:unmanaged,IComponentBase where T11:unmanaged,IComponentBase where T12:unmanaged,IComponentBase where T13:unmanaged,IComponentBase where T14:unmanaged,IComponentBase where T15:unmanaged,IComponentBase where T16:unmanaged,IComponentBase where T17:unmanaged,IComponentBase where T18:unmanaged,IComponentBase {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>> task, in Filter filterInternal, ME.ECS.Filters.FDRRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new JobsRRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(JobsRRRRRRRRRRRRRRRRRRR<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), in bag.GetT0(i),in bag.GetT1(i),in bag.GetT2(i),in bag.GetT3(i),in bag.GetT4(i),in bag.GetT5(i),in bag.GetT6(i),in bag.GetT7(i),in bag.GetT8(i),in bag.GetT9(i),in bag.GetT10(i),in bag.GetT11(i),in bag.GetT12(i),in bag.GetT13(i),in bag.GetT14(i),in bag.GetT15(i),in bag.GetT16(i),in bag.GetT17(i),in bag.GetT18(i));
            bag.Push();

        }

    });
    
}



    }

}
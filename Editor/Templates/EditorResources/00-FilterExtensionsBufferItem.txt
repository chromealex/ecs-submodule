#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public unsafe struct FilterBag<#ITEMS_TYPE#> : IFilterBag #ITEMS_WHERE# {
    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<Ptr> regs;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private ME.ECS.Collections.NativeBufferArray<Entity> entities;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeList<int> indexes;
    [Unity.Collections.NativeDisableParallelForRestriction][Unity.Collections.ReadOnlyAttribute]  private Unity.Collections.NativeArray<int> entityToIndex;
    [Unity.Collections.NativeDisableParallelForRestriction] private Ops componentOps;
    public int Count => this.Length;
    public Tick tick;
    private EntityVersions entityVersions;
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("FilterBag::Create()");
        #endif
        var mode = Unity.Collections.NativeLeakDetection.Mode;
        Unity.Collections.NativeLeakDetection.Mode = Unity.Collections.NativeLeakDetectionMode.Disabled;
        var world = filter.world;
        this.tick = world.GetCurrentTick();
        this.entityVersions = world.currentState.storage.versions;
        this.entities = world.currentState.storage.cache;
        var filterArr = filter.ToList(allocator, out this.entityToIndex);
        this.indexes = filterArr;
        this.Length = filterArr.Length;
        this.regs = default;
        this.componentOps = default;
        if (this.Length > 0) {
            this.regs = new Unity.Collections.NativeArray<Ptr>(#INDEX#, allocator);
            this.componentOps = new Ops(this.Length);
            var allRegs = world.currentState.structComponents.GetAllRegistries();
            #REGS_INIT#
        }
        Unity.Collections.NativeLeakDetection.Mode = mode;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    public void BeginForEachIndex(int chunkIndex) => this.componentOps.BeginForEachIndex(chunkIndex);
    public void EndForEachIndex() => this.componentOps.EndForEachIndex();
    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        var allRegs = world.currentState.structComponents.GetAllRegistries();
        var ops = this.componentOps;
        for (int i = 0; i < ops.Length; ++i) {
            if (ops.Read(i, out var op) == true) {
                var entity = this.entities[this.indexes[op.entityIndex]];
                if (op.code == 2 && op.componentId == -1) {
                    world.RemoveEntity(in entity);
                } else {
                    #PUSH_OPS#
                }
            }
        }
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public int GetIndexByEntityId(int id) => this.entityToIndex[id];
    public void DestroyEntity(int index) => this.componentOps.Write(new Op() { entityIndex = index, componentId = -1, code = 2, });
    public int GetEntityId(int index) => this.indexes[index];
    public ref readonly Entity GetEntity(int index) => ref this.entities.GetRefRead(this.indexes[index]);
    public void Revert() => this.Dispose();
    private void Dispose() {
        if (this.Length > 0) {
            this.regs.Dispose();
            this.componentOps.Dispose();
        }
        this.indexes.Dispose();
        this.entityToIndex.Dispose();
        this.entities = default;
    }
    #region API
    #ITEMS_METHODS#
    #endregion
}
